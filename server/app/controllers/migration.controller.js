const asyncHandler = require("express-async-handler");
const fs = require("fs")
const data = require("../../data/mock/configuration.data");
const { AviLabDetailsModel, ConversionStatusModel, AviOutputModel } = require('../models/migration.model');

exports.generateConfiguration = asyncHandler(async (req, res, next) => {
    const {
        f5_host_ip = '10.206.40.100', 
        f5_ssh_user, 
        f5_ssh_password,
        avi_lab_ip = '10.10.10.10',
        avi_lab_user = 'admin',
        avi_lab_password = 'abc',
        avi_vrf = 'global', 
        avi_tenant = 'admin', 
        avi_cloud = 'Default-Cloud',
        avi_controller_version = '30.2.1'
    } = req.body;

    const conversionStatusFilePath = `./migration/${f5_host_ip}/output/bigip-conversionstatus.json`; 
    const aviOutputFilePath = `./migration/${f5_host_ip}/output/bigip-output.json`; 

    // Save the Avi Lab details in DB. 
    try {
        await AviLabDetailsModel.insertMany({
            avi_lab_ip,
            avi_lab_user,
            avi_lab_password,
        });
    } catch (err) {
        res.status(200).json({ message: 'Error in saving the Avi Lab Controller details, '+err.message});
    }

    // Run the migration tool with downloaded Certs & Keys and with fetched configuration from Lab Controller.
    // let dataToSend;
    // const pythonProcess = spawn('f5_converter.py', [
    //     '--f5_host_ip', f5_host_ip, 
    //     '--f5_ssh_user', f5_ssh_user, 
    //     '--f5_ssh_password', f5_ssh_password, 
    //     '--vrf', avi_vrf, 
    //     '--tenant', avi_tenant, 
    //     '--cloud_name', avi_cloud, 
    //     '--controller_version', avi_controller_version, 
    //     '-o', 'migration'
    // ]);

    // // Collect data from script.
    // pythonProcess.stdout.on('data', function (data) {
    //     console.log('Pipe data from python script ...');
    //     dataToSend = data.toString();
    // });

    // pythonProcess.stderr.on('data', (data) => {
    //     console.error(`stderr: ${data}`);
    // });

    // // On close event, we are sure that stream from child process is closed.
    // pythonProcess.on('close', (code) => {
    //     console.log(dataToSend);
    //     console.log(`child process close all stdio with code ${code}`);

        // Save the JSONs generated by migration tool.
        const conversionStatusFileExists = fs.existsSync(conversionStatusFilePath);
        const aviOutputFileExists = fs.existsSync(aviOutputFilePath);

        if (conversionStatusFileExists && aviOutputFileExists) {
            let count = 0;
            const readFileHanlder = async(modelType, err, data) => {
                count++;

                if(err) {
                    res.status(200).json({ message: `Error while reading the ${modelType} JSON in DB, `+err.message});
                } else {
                    const outputJson = JSON.parse(data);

                    try {
                        if (modelType === 'ConversionStatus') {
                            await ConversionStatusModel.insertMany(outputJson);  
                        } else {
                            await AviOutputModel.insertMany(outputJson); 
                        }
                    } catch (err) {
                        res.status(200).json({ message: `Error while saving the ${modelType} JSON in DB, `+err.message});
                    }
                }

                if (count == 2) {
                    res.status(200).json({ message: 'Configuration generated successfully and saved in DB.'});
                }
            };

            fs.readFile(conversionStatusFilePath, readFileHanlder.bind(null, 'ConversionStatus'));
            fs.readFile(aviOutputFilePath, readFileHanlder.bind(null, 'AviOutput'));
        } else {
            res.status(200).json({ message: 'Error while generating required Configuration JSONs'});
        }

    // });
});


exports.getLabControllerDetails = asyncHandler(async (req, res, next) => {
    const result = data.labControllerDetails;

    res.status(200).json(result);
});

exports.updateMigrationData = asyncHandler(async (req, res, next) => {
    const result = req.body

    res.status(200).json(result);
});

exports.startMigration = asyncHandler(async (req, res, next) => {
    const result = data.getAllIncompleteVSMigrationData;

    res.status(200).json(result);
});

exports.fetchFromController = asyncHandler(async (req, res, next) => {
    const result = data.getAllIncompleteVSMigrationData;

    res.status(200).json(result);
});

exports.setLabControllerDetails = asyncHandler(async (req, res, next) => {
    data.labControllerDetails = req.body;
    const result =  data.labControllerDetails;

    res.status(200).json(result);
});
